//
//  LoginViewModel.swift
//  SaveTrack
//
//  Created by Jinyoung Kim on 9/11/24.
//

import Foundation

import KakaoSDKAuth
import KakaoSDKUser

@Observable
final class LoginViewModel {
    let apiService = APIService()
    
    func login() async {
        do {
            print("‚ùáÔ∏è",Secrets.ProjectURLs.PROJECT_API_URL)
            let kakaoAccessToken = try await kakaoLogin()
            let request = AuthTarget.kakaoLogin(accessToken: kakaoAccessToken)
            let result = try await apiService.request(request: request, response: BaseResponseDTO<LoginResponseDTO>.self)
            print("‚úÖ", result.code)
            print("‚úÖ", result.message)
            print("‚úÖ", result.data)
        } catch {
            print("üö® \(error)")
        }
    }
    
    /// Ïπ¥Ïπ¥Ïò§ÌÜ° Î°úÍ∑∏Ïù∏Í≥º Í∏∞Î≥∏ Î∏åÎùºÏö∞Ï†ÄÎ°ú Î°úÍ∑∏Ïù∏ÏùÑ Ïó∞Îã¨ÏïÑ ÏãúÎèÑ
    /// - Returns: accessToken
    private func kakaoLogin() async throws -> String {
        do {
            var oauthToken: OAuthToken
            if UserApi.isKakaoTalkLoginAvailable() {
                oauthToken = try await UserApi.shared.loginWithKakaoTalk() // Ïπ¥ÌÜ° Î°úÍ∑∏Ïù∏
            } else {
                oauthToken = try await UserApi.shared.loginWithKakaoAccount() // Í∏∞Î≥∏ Î∏åÎùºÏö∞Ï†Ä Î°úÍ∑∏Ïù∏
            }
            print("‚úÖ", oauthToken.accessToken) // TODO: ÏÇ≠Ï†ú
            return oauthToken.accessToken
        } catch {
            print("\(error)")
            throw error
        }
    }
}
